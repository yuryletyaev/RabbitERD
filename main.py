from fastapi import FastAPI, Request
from fastapi.responses import HTMLResponse
from fastapi.staticfiles import StaticFiles
from fastapi.templating import Jinja2Templates
from fastapi.middleware.cors import CORSMiddleware
import json
import asyncio
from rabbitmq_client import RabbitMQClient
from typing import Dict, List, Any
import logging

app = FastAPI(title="RabbitMQ ERD Visualizer")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Middleware –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤
@app.middleware("http")
async def log_requests(request: Request, call_next):
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö HTTP –∑–∞–ø—Ä–æ—Å–æ–≤"""
    start_time = asyncio.get_event_loop().time()
    
    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
    if request.url.path.startswith("/.well-known") or request.url.path == "/favicon.ico":
        response = await call_next(request)
        return response
    
    logger.info(f"üì• {request.method} {request.url.path}")
    
    response = await call_next(request)
    
    process_time = asyncio.get_event_loop().time() - start_time
    logger.info(f"üì§ {response.status_code} - {process_time:.3f}s")
    
    return response

# –ü–æ–¥–∫–ª—é—á–∞–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã –∏ —à–∞–±–ª–æ–Ω—ã
app.mount("/static", StaticFiles(directory="static"), name="static")
templates = Jinja2Templates(directory="templates")

# –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
with open('config.json', 'r', encoding='utf-8') as f:
    config = json.load(f)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–ª–∏–µ–Ω—Ç RabbitMQ
rabbitmq_client = RabbitMQClient(config)

@app.get("/", response_class=HTMLResponse)
async def root(request: Request):
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–µ–π RabbitMQ"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ç–æ–ø–æ–ª–æ–≥–∏–∏ RabbitMQ
        topology = await rabbitmq_client.get_topology()
        
        # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –≤—Å–µ –ø–æ–ª—è –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç
        if not topology:
            topology = {"exchanges": [], "queues": [], "bindings": [], "connections": []}
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
        for field in ["exchanges", "queues", "bindings", "connections"]:
            if field not in topology:
                topology[field] = []
        
        # –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö (RabbitMQ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω), –¥–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
        if (topology["exchanges"] == [] and topology["queues"] == [] and 
            topology["bindings"] == [] and topology["connections"] == []):
            print("RabbitMQ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∑–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏")
            topology = {
                "exchanges": [
                    {"name": "test.exchange", "vhost": "/", "type": "direct"},
                    {"name": "user.exchange", "vhost": "/", "type": "topic"}
                ],
                "queues": [
                    {"name": "user.queue", "vhost": "/"},
                    {"name": "order.queue", "vhost": "/"},
                    {"name": "notification.queue", "vhost": "/"}
                ],
                "bindings": [
                    {"source": "test.exchange", "destination": "user.queue", "routing_key": "user.*", "destination_type": "queue", "vhost": "/"},
                    {"source": "user.exchange", "destination": "order.queue", "routing_key": "order.create", "destination_type": "queue", "vhost": "/"},
                    {"source": "user.exchange", "destination": "notification.queue", "routing_key": "user.*", "destination_type": "queue", "vhost": "/"}
                ],
                "connections": []
            }
        
        return templates.TemplateResponse("index.html", {
            "request": request,
            "topology": topology
        })
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–ø–æ–ª–æ–≥–∏–∏: {e}")
        return templates.TemplateResponse("error.html", {
            "request": request,
            "error": str(e)
        })

@app.get("/api/topology")
async def get_topology():
    """API —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–ø–æ–ª–æ–≥–∏–∏ RabbitMQ"""
    try:
        topology = await rabbitmq_client.get_topology()
        
        # –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö (RabbitMQ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω), –¥–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
        if (topology["exchanges"] == [] and topology["queues"] == [] and 
            topology["bindings"] == [] and topology["connections"] == []):
            print("RabbitMQ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∑–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏")
            topology = {
                "exchanges": [
                    {"name": "test.exchange", "vhost": "/", "type": "direct"},
                    {"name": "user.exchange", "vhost": "/", "type": "topic"}
                ],
                "queues": [
                    {"name": "user.queue", "vhost": "/"},
                    {"name": "order.queue", "vhost": "/"},
                    {"name": "notification.queue", "vhost": "/"}
                ],
                "bindings": [
                    {"source": "test.exchange", "destination": "user.queue", "routing_key": "user.*", "destination_type": "queue", "vhost": "/"},
                    {"source": "user.exchange", "destination": "order.queue", "routing_key": "order.create", "destination_type": "queue", "vhost": "/"},
                    {"source": "user.exchange", "destination": "notification.queue", "routing_key": "user.*", "destination_type": "queue", "vhost": "/"}
                ],
                "connections": []
            }
        
        return {"status": "success", "data": topology}
    except Exception as e:
        return {"status": "error", "message": str(e)}

@app.get("/api/exchanges")
async def get_exchanges():
    """API —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –æ–±–º–µ–Ω–æ–≤"""
    try:
        exchanges = await rabbitmq_client.get_exchanges()
        return {"status": "success", "data": exchanges}
    except Exception as e:
        return {"status": "error", "message": str(e)}

@app.get("/api/queues")
async def get_queues():
    """API —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –æ—á–µ—Ä–µ–¥–µ–π"""
    try:
        queues = await rabbitmq_client.get_queues()
        return {"status": "success", "data": queues}
    except Exception as e:
        return {"status": "error", "message": str(e)}

@app.get("/api/bindings")
async def get_bindings():
    """API —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø—Ä–∏–≤—è–∑–æ–∫"""
    try:
        bindings = await rabbitmq_client.get_bindings()
        return {"status": "success", "data": bindings}
    except Exception as e:
        return {"status": "error", "message": str(e)}

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç –±—Ä–∞—É–∑–µ—Ä–æ–≤ –∏ DevTools
@app.get("/.well-known/apps/ecific/com.chrome.devtools.json")
async def chrome_devtools():
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ Chrome DevTools"""
    return {"status": "not_found", "message": "Chrome DevTools configuration not available"}

@app.get("/.well-known/{path:path}")
async def well_known(path: str):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ .well-known"""
    return {"status": "not_found", "message": f"Resource not found: {path}"}

@app.get("/favicon.ico")
async def favicon():
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ favicon"""
    from fastapi.responses import Response
    return Response(status_code=204)

@app.get("/robots.txt")
async def robots():
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ robots.txt"""
    from fastapi.responses import PlainTextResponse
    return PlainTextResponse("User-agent: *\nDisallow: /api/")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
@app.get("/{path:path}")
async def catch_all(path: str):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö GET –∑–∞–ø—Ä–æ—Å–æ–≤"""
    if path.startswith("api/"):
        return {"status": "error", "message": f"API endpoint not found: {path}"}
    return {"status": "not_found", "message": f"Page not found: {path}"}

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=8000)

